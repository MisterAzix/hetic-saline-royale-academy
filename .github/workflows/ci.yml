name: CI

env:
  DIST_API_PATH: dist/apps/api
  DIST_CLIENT_PATH: dist/apps/client
  DIST_ADMIN_PATH: dist/apps/admin

on:
  pull_request:
  push:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        id: cache-primes
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-v3-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache-primes.outputs.cache-hit != 'true'
        run: npm install

  lint:
    runs-on: ubuntu-latest
    needs:
      - install
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-v3-${{ hashFiles('package-lock.json') }}

      - name: Lint project
        run: |
          npm run affected:lint

  build:
    runs-on: ubuntu-latest
    needs:
      - lint
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-npm-v3-${{ hashFiles('package-lock.json') }}

      - name: Build project
        run: |
          npm run affected:build

      - name: Download project as artifact
        uses: actions/upload-artifact@main
        with:
          name: bundle
          path: dist

  deploy:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'develop' }}
      url: ${{ vars.CLIENT_URL }}
    needs:
      - build
    # if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: bundle
          path: dist

      - name: ECHO
        run: |
          ls -la
          if [[ -d $DIST_API_PATH ]]; then echo "API"; fi
          if [[ -d $DIST_CLIENT_PATH ]]; then echo "CLIENT"; fi
          if [[ -d $DIST_ADMIN_PATH ]]; then echo "ADMIN"; fi

      - name: Create API Env
        if: ${{ if [[ -d $DIST_API_PATH ]] then true; fi }}
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_PORT: ${{ secrets.API_PORT }}
          envkey_DATABASE_URL: ${{ secrets.DATABASE_URL }}
          envkey_JWT_SECRET: ${{ secrets.JWT_SECRET }}
          envkey_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          envkey_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          envkey_GOOGLE_CLIENT_CALLBACK_URL: ${{ secrets.GOOGLE_CLIENT_CALLBACK_URL }}
          directory: $DIST_API_PATH
          file_name: .env
          fail_on_empty: false

      - name: Deploy API
        if: ${{ if [[ -d $DIST_API_PATH ]] then true; fi }}
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: $DIST_API_PATH
          TARGET: "/var/www/${{ vars.API_URL }}"

      - name: Create Dashboard Env
        if: ${{ if [[ -d $DIST_ADMIN_PATH ]] then true; fi }}
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_API_URL: ${{ vars.API_URL }}
          directory: $DIST_ADMIN_PATH
          file_name: .env
          fail_on_empty: false

      - name: Deploy Dashboard
        if: ${{ if [[ -d $DIST_ADMIN_PATH ]] then true; fi }}
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: $DIST_ADMIN_PATH
          TARGET: "/var/www/${{ vars.DASHBOARD_URL }}"

      - name: Create Client Env
        if: ${{ if [[ -d $DIST_CLIENT_PATH ]] then true; fi }}
        uses: SpicyPizza/create-envfile@v2.0
        with:
          envkey_API_URL: ${{ vars.API_URL }}
          directory: $DIST_CLIENT_PATH
          file_name: .env
          fail_on_empty: false

      - name: Deploy Client
        if: ${{ if [[ -d $DIST_CLIENT_PATH ]] then true; fi }}
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SOURCE: $DIST_CLIENT_PATH
          TARGET: "/var/www/${{ vars.CLIENT_URL }}"

      - name: Restart Apps
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PORT: ${{ secrets.REMOTE_PORT }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SCRIPT_AFTER: |
            cd /var/www/${{ vars.API_URL }} && npm install && npm install prisma-dbml-generator && npx prisma generate && npm prisma migrate deploy
            [[ $((pm2 info ${{ vars.API_URL }} || echo 'status|stopped') | grep status) =~ 'stopped' ]] && pm2 start main.js --name ${{ vars.API_URL }} || pm2 restart ${{ vars.API_URL }}
            cd /var/www/${{ vars.DASHBOARD_URL }} && npm install
            [[ $((pm2 info ${{ vars.DASHBOARD_URL }} || echo 'status|stopped') | grep status) =~ 'stopped' ]] && pm2 start npm --name ${{ vars.DASHBOARD_URL }} -- start -- -p 3002 || pm2 restart ${{ vars.DASHBOARD_URL }}
            cd /var/www/${{ vars.CLIENT_URL }} && npm install
            [[ $((pm2 info ${{ vars.CLIENT_URL }} || echo 'status|stopped') | grep status) =~ 'stopped' ]] && pm2 start npm --name ${{ vars.CLIENT_URL }} -- start -- -p 3001 || pm2 restart ${{ vars.CLIENT_URL }}


