generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") //"postgresql://postgres:password@localhost:5432/saline?schema=public"
}

model Achievement {
  id             String        @id @default(uuid())
  title          String        @unique() @db.VarChar(100)
  description    String?       @db.VarChar(700)
  createdAt      DateTime?     @default(now()) @map("created_at")
  lastUpdatedAt  DateTime?     @updatedAt @map("last_updated_at")
  lastUpdatedBy  String?       @map(name: "last_updated_by") @db.VarChar(100)
  createdBy      String?       @map(name: "created_by") @db.VarChar(100)
  criteria       String?       @db.VarChar(100)
  unlockDate     DateTime?     @map(name: "unlock_date")
  visible        Boolean?      @default(false)
  deleted        Boolean?      @default(false)
  gamificationId String?       @unique @map("gamification_id")
  category       Category?
  rewards        Reward[]
  badges         Badge[]
  gamification   Gamification? @relation(fields: [gamificationId], references: [id])
}

model Badge {
  id                String       @id @default(uuid())
  title             String       @unique @db.VarChar(100)
  description       String?      @db.VarChar(100)
  criteria          String?      @db.VarChar(100)
  level             String?      @db.VarChar(100)
  unlock_date       DateTime?    @map("unlock_date ")
  createdAt         DateTime?    @default(now()) @map("created_at")
  lastUpdatedAt     DateTime?    @updatedAt @map("last_updated_at")
  createdBy         String?      @map("created_by ") @db.VarChar(100)
  lastUpdatedBy     String?      @map("last_updated_by  ") @db.VarChar(100)
  visible           Boolean?     @default(false)
  hiddenDescription String?      @map("hidden_description") @db.VarChar(100)
  deleted           Boolean?     @default(false)
  achievementId     String?      @map("achievement_id")
  category          Category?
  ressource         Ressource?
  Achievement       Achievement? @relation(fields: [achievementId], references: [id])
}

model Category {
  id            String       @id @default(uuid())
  name          String       @unique @db.VarChar(100)
  description   String?
  createdAt     DateTime?    @default(now()) @map("created_at")
  lastUpdatedAt DateTime?    @updatedAt @map("last_updated_at")
  createdBy     String?      @map("created_by ") @db.VarChar(100)
  lastUpdatedBy String?      @map("last_updated_by  ") @db.VarChar(100)
  deleted       Boolean?     @default(false)
  achievementId String?      @unique @map("achievement_id")
  badgeId       String?      @unique @map("badge_id")
  courseId      String?      @unique @map("course_id")
  achivement    Achievement? @relation(fields: [achievementId], references: [id])
  badge         Badge?       @relation(fields: [badgeId], references: [id])
  course        Course?      @relation(fields: [courseId], references: [id])
}

model Chapter {
  id            String    @id @default(uuid())
  title         String    @unique @db.VarChar(100)
  description   String?   @db.VarChar(100)
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  courseId      String?   @map("course_id")
  lessons       Lesson[]
  course        Course?   @relation(fields: [courseId], references: [id])
}

model Course {
  id                 String           @id @default(uuid())
  title              String           @unique @db.VarChar(200)
  description        String?          @db.VarChar(700)
  createdAt          DateTime?        @default(now()) @map("created_at")
  lastUpdatedAt      DateTime?        @updatedAt @map("last_updated_at")
  createdBy          String?          @map("created_by") @db.VarChar(100)
  lastUpdatedBy      String?          @map("last_updated_by") @db.VarChar(100)
  deleted            Boolean?         @default(false)
  userId             String?          @map("user_id")
  progressTrackingId String?          @unique @map("progress_tracking")
  category           Category?
  chapters           Chapter[]
  tags               Tag[]
  ressources         Ressource[]
  progressTracking   ProgressTracker? @relation(fields: [progressTrackingId], references: [id])
  user               User?            @relation(fields: [userId], references: [id])
}

model Gamification {
  id                 String           @id @default(uuid())
  description        String
  experiencePoint    Int?             @map("experience_point")
  level              String?
  createdAt          DateTime?        @default(now()) @map("created_at")
  lastUpdatedAt      DateTime?        @updatedAt @map("last_updated_at")
  deleted            Boolean?         @default(false)
  ressourceId        String?          @map("ressource_id")
  progressTrackingId String?          @unique @map("progress-tracking")
  userId             String?          @unique @map("user_id")
  achievement        Achievement?
  ressource          Ressource?
  useer              User?            @relation(fields: [userId], references: [id])
  progressTrackers   ProgressTracker? @relation(fields: [progressTrackingId], references: [id])
}

model Image {
  id            String    @id @default(uuid())
  description   String
  url           String    @db.VarChar(100)
  height        Int?
  width         Int?
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  lessonId      String?   @unique @map("lesson_id")
  userId        String?   @unique @map("user_id")
  lesson        Lesson?   @relation(fields: [lessonId], references: [id])
  user          User?     @relation(fields: [userId], references: [id])
}

model Lesson {
  id            String      @id @default(uuid())
  title         String      @db.VarChar(100)
  description   String?     @db.VarChar(100)
  duration      Int?
  createdAt     DateTime?   @default(now()) @map("created_at")
  lastUpdatedAt DateTime?   @updatedAt @map("last_updated_at")
  deleted       Boolean?    @default(false)
  chapterId     String?     @unique @map("chapter_id")
  images        Image[]
  videos        Video[]
  tags          Tag[]
  ressources    Ressource[]
  Chapter       Chapter?    @relation(fields: [chapterId], references: [id])
}

model Notification {
  id            String    @id @default(uuid())
  message       String    @db.VarChar(100)
  published     Boolean?
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  userId        String?   @unique @map("user_id")
  user          User?     @relation(fields: [userId], references: [id])
}

model ProgressTracker {
  id                String        @id @default(uuid())
  progress          Int?
  completedLessons  Int?          @default(0) @map("completed_lessons")
  totalLessons      Int?          @default(0) @map("total_lessons")
  completedChapters Int?          @default(0) @map("completed_chapters")
  totalChapters     Int?          @default(0) @map("total_chapters")
  createdAt         DateTime?     @default(now()) @map("created_at")
  lastUpdatedAt     DateTime?     @updatedAt @map("last_updated_at")
  deleted           Boolean?      @default(false)
  userId            String?       @unique @map("user_id")
  course            Course?
  gamifications     Gamification?
  user              User?         @relation(fields: [userId], references: [id])
}

model Ressource {
  id             String        @id @default(uuid())
  title          String        @db.VarChar(100)
  path           String?
  type           String?
  accessLevel    String?       @map("access_level")
  duration       Int?
  createdAt      DateTime?     @default(now()) @map("created_at")
  lastUpdatedAt  DateTime?     @updatedAt @map("last_updated_at")
  deleted        Boolean?      @default(false)
  courseId       String?       @unique @map("course_id")
  gamificationId String?       @unique @map("gamification_id")
  bagdeId        String?       @unique @map("badge_id")
  lessonId       String?       @unique @map("lesson_id")
  course         Course?       @relation(fields: [courseId], references: [id])
  gamification   Gamification? @relation(fields: [gamificationId], references: [id])
  badge          Badge?        @relation(fields: [bagdeId], references: [id])
  lesson         Lesson?       @relation(fields: [lessonId], references: [id])
}

model Reward {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(100)
  description    String?      @db.VarChar(100)
  type           String?      @db.VarChar(100)
  value          Float?
  availability   Boolean?     @default(false)
  unlockCriteria Boolean?     @default(false) @map("unlock_criteria")
  redeemable     Boolean?     @default(false)
  expirationDate DateTime?    @map("expiration_date")
  createdAt      DateTime?    @default(now()) @map("created_at")
  lastUpdatedAt  DateTime?    @updatedAt @map("last_updated_at")
  createdBy      String?      @map("created_by") @db.VarChar(100)
  lastUpdatedBy  String?      @map("last_updated_by") @db.VarChar(100)
  deleted        Boolean?     @default(false)
  accessLevel    Int?         @map("access_level")
  achievementId  String?      @map("achievement_id")
  Achievement    Achievement? @relation(fields: [achievementId], references: [id])
}

model Subscription {
  id            String    @id @default(uuid())
  plan          String    @db.VarChar(100)
  payed         Boolean?  @default(false)
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  userId        String?   @unique @map("user_id")
  user          User?     @relation(fields: [userId], references: [id])
}

model Tag {
  id            String    @id @default(uuid())
  name          String    @db.VarChar(100)
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  courseId      String?   @unique @map("course_id")
  lessonId      String?   @unique @map("lesson_id")
  course        Course?   @relation(fields: [courseId], references: [id])
  lesson        Lesson?   @relation(fields: [lessonId], references: [id])
}

model User {
  id              String           @id @default(uuid())
  displayName     String?          @map("display_name") @db.VarChar(100)
  firstName       String           @map("first_name") @db.VarChar(100)
  lastName        String           @map("last_name") @db.VarChar(100)
  email           String           @unique @db.VarChar(100)
  createdAt       DateTime?        @default(now()) @map("created_at")
  lastUpdatedAt   DateTime?        @updatedAt @map("last_updated_at")
  deleted         Boolean?         @default(false)
  role            Role             @default(USER)
  password        String           @db.VarChar(100)
  preferences     String?          @db.VarChar(100)
  ecole           String?          @db.VarChar(100)
  image           Image?
  courses         Course[]
  gamefication    Gamification?
  notification    Notification?
  subscription    Subscription?
  progressTracker ProgressTracker?
}

model Video {
  id            String    @id @default(uuid())
  description   String?
  url           String    @db.VarChar(100)
  height        Int?
  width         Int?
  createdAt     DateTime? @default(now()) @map("created_at")
  lastUpdatedAt DateTime? @updatedAt @map("last_updated_at")
  deleted       Boolean?  @default(false)
  lessonId      String?   @unique @map("lesson_id")
  lesson        Lesson?   @relation(fields: [lessonId], references: [id])
}

enum Role {
  USER
  ADMIN
}
