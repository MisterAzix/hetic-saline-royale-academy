generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") //"postgresql://postgres:password@localhost:5432/saline?schema=public"
}

model Achievement {
  id              String        @id @default(uuid())
  title           String        @unique() @db.VarChar(100)
  description     String?       @db.VarChar(700)
  criteria        String?       @db.VarChar(100)
  unlock_date     DateTime?
  is_visible      Boolean?      @default(false)
  category        Category?
  rewards         Reward[]
  badges          Badge[]
  gamification    Gamification? @relation(fields: [gamification_id], references: [id])
  gamification_id String?       @unique
  is_deleted      Boolean?      @default(false)
  updated_by      String?       @db.VarChar(100)
  created_by      String?       @db.VarChar(100)
  created_at      DateTime?     @default(now())
  updated_at      DateTime?     @updatedAt
}

model Badge {
  id                 String       @id @default(uuid())
  title              String       @unique @db.VarChar(100)
  description        String?      @db.VarChar(100)
  criteria           String?      @db.VarChar(100)
  level              String?      @db.VarChar(100)
  unlock_date        DateTime?
  is_visible         Boolean?     @default(false)
  hidden_description String?      @db.VarChar(100)
  category           Category?
  achievement        Achievement? @relation(fields: [achievement_id], references: [id])
  achievement_id     String?
  is_deleted         Boolean?     @default(false)
  created_by         String?      @db.VarChar(100)
  updated_by         String?      @db.VarChar(100)
  created_at         DateTime?    @default(now())
  updated_at         DateTime?    @updatedAt
}

model Category {
  id             String       @id @default(uuid())
  name           String       @unique @db.VarChar(100)
  description    String?
  achivement     Achievement? @relation(fields: [achievement_id], references: [id])
  achievement_id String?      @unique
  badge          Badge?       @relation(fields: [badge_id], references: [id])
  badge_id       String?      @unique
  course         Course?      @relation(fields: [course_id], references: [id])
  course_id      String?      @unique
  is_deleted     Boolean?     @default(false)
  created_by     String?      @db.VarChar(100)
  updated_by     String?      @db.VarChar(100)
  created_at     DateTime?    @default(now())
  updated_at     DateTime?    @updatedAt
}

model Chapter {
  id             String       @id @default(uuid())
  title          String       @db.VarChar(100)
  timecode       String
  masterclass    Masterclass? @relation(fields: [masterclass_id], references: [id])
  masterclass_id String?
  course         Course?      @relation(fields: [course_id], references: [id])
  course_id      String?
  is_deleted     Boolean?     @default(false)
  created_at     DateTime?    @default(now())
  updated_at     DateTime?    @updatedAt
}

model Course {
  id          String    @id @default(uuid())
  title       String    @unique @db.VarChar(200)
  description String?   @db.VarChar(700)
  category    Category?
  chapters    Chapter[]
  tags        Tag[]
  user        User?     @relation(fields: [user_id], references: [id])
  user_id     String?
  is_deleted  Boolean?  @default(false)
  created_by  String?   @db.VarChar(100)
  updated_by  String?   @db.VarChar(100)
  created_at  DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model Gamification {
  id               String       @id @default(uuid())
  description      String
  experience_point Int?
  level            String?
  achievement      Achievement?
  user             User?        @relation(fields: [user_id], references: [id])
  user_id          String?      @unique
  is_deleted       Boolean?     @default(false)
  created_at       DateTime?    @default(now())
  updated_at       DateTime?    @updatedAt
}

model Masterclass {
  id                 String               @id @default(uuid())
  title              String               @db.VarChar(100)
  description        String?              @db.VarChar(1500)
  duration           Int?
  cover_url          String?
  video_url          String
  status             Status               @default(DRAFT)
  tags               Tag[]
  chapters           Chapter[]
  MasterclassTracker MasterclassTracker[]
  is_deleted         Boolean?             @default(false)
  created_at         DateTime?            @default(now())
  updated_at         DateTime?            @updatedAt
}

model Notification {
  id         String    @id @default(uuid())
  message    String    @db.VarChar(100)
  published  Boolean?
  user_id    String?   @unique
  user       User?     @relation(fields: [user_id], references: [id])
  is_deleted Boolean?  @default(false)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model MasterclassTracker {
  id             String       @id @default(uuid())
  progression    Int?         @default(0)
  is_deleted     Boolean?     @default(false)
  masterclass_id String?      @unique
  masterclass    Masterclass? @relation(fields: [masterclass_id], references: [id])
  user           User?        @relation(fields: [user_id], references: [id])
  user_id        String?
  created_at     DateTime?    @default(now())
  updated_at     DateTime?    @updatedAt
}

model Reward {
  id              String       @id @default(uuid())
  title           String       @db.VarChar(100)
  description     String?      @db.VarChar(100)
  type            String?      @db.VarChar(100)
  value           Float?
  availability    Boolean?     @default(false)
  unlock_criteria Boolean?     @default(false)
  redeemable      Boolean?     @default(false)
  expiration_date DateTime?
  access_level    Int?
  achievement     Achievement? @relation(fields: [achievement_id], references: [id])
  achievement_id  String?
  is_deleted      Boolean?     @default(false)
  created_by      String?      @db.VarChar(100)
  updated_by      String?      @db.VarChar(100)
  created_at      DateTime?    @default(now())
  updated_at      DateTime?    @updatedAt
}

model Subscription {
  id         String    @id @default(uuid())
  plan       String    @db.VarChar(100)
  payed      Boolean?  @default(false)
  user       User?     @relation(fields: [user_id], references: [id])
  user_id    String?   @unique
  is_deleted Boolean?  @default(false)
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
}

model Tag {
  id             String       @id @default(uuid())
  name           String       @db.VarChar(100)
  course         Course?      @relation(fields: [course_id], references: [id])
  course_id      String?      @unique
  masterclass    Masterclass? @relation(fields: [masterclass_id], references: [id])
  masterclass_id String?      @unique
  is_deleted     Boolean?     @default(false)
  created_at     DateTime?    @default(now())
  updated_at     DateTime?    @updatedAt
}

model User {
  id                 String               @id @default(uuid())
  display_name       String?              @db.VarChar(100)
  first_name         String               @db.VarChar(100)
  last_name          String               @db.VarChar(100)
  email              String               @unique @db.VarChar(100)
  role               Role                 @default(USER)
  password           String               @db.VarChar(100)
  preferences        String?              @db.VarChar(100)
  ecole              String?              @db.VarChar(100)
  picture_url        String?
  courses            Course[]
  MasterclassTracker MasterclassTracker[]
  gamefication       Gamification?
  notification       Notification?
  subscription       Subscription?
  is_deleted         Boolean?             @default(false)
  created_at         DateTime?            @default(now())
  updated_at         DateTime?            @updatedAt
}

enum Status {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum Role {
  USER
  ADMIN
}
